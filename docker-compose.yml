# based on the documentation in https://hub.docker.com/r/bitnami/kafka

services:
  kafka:
    container_name: ${KAFKA_CONTAINER_NAME}
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_NODE_ID=${KAFKA_NODE_ID}
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_BROKER_INTERNAL_PORT},CONTROLLER://:${KAFKA_CONTROLLER_INTERNAL_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_CONTAINER_NAME}:${KAFKA_BROKER_INTERNAL_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_NODE_ID}@${KAFKA_CONTAINER_NAME}:${KAFKA_CONTROLLER_INTERNAL_PORT}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:${KAFKA_BROKER_INTERNAL_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  init:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        HOST_PROJECT_FOLDER_NAME: init
        WORKDIR_FOLDER_NAME: ${WORKDIR_FOLDER_NAME}
        CONTAINER_PROJECT_FOLDER_NAME: ${CONTAINER_PROJECT_FOLDER_NAME}
        UTILS_FOLDER_NAME: ${UTILS_FOLDER_NAME}
    depends_on:
      kafka:
        condition: service_healthy

  consumer:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        HOST_PROJECT_FOLDER_NAME: consumer
        WORKDIR_FOLDER_NAME: ${WORKDIR_FOLDER_NAME}
        CONTAINER_PROJECT_FOLDER_NAME: ${CONTAINER_PROJECT_FOLDER_NAME}
        UTILS_FOLDER_NAME: ${UTILS_FOLDER_NAME}
    depends_on:
      - init
    deploy:
      replicas: ${CONSUMER_INSTANCE_COUNT}

  producer:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        HOST_PROJECT_FOLDER_NAME: producer
        WORKDIR_FOLDER_NAME: ${WORKDIR_FOLDER_NAME}
        CONTAINER_PROJECT_FOLDER_NAME: ${CONTAINER_PROJECT_FOLDER_NAME}
        UTILS_FOLDER_NAME: ${UTILS_FOLDER_NAME}
    container_name: ${PRODUCER_CONTAINER_NAME}
    depends_on:
      consumer:
        condition: service_started